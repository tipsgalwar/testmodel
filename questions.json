[
  {
    "id": 1,
    "question": "What is the correct way to declare a variable in C?",
    "options": [
      "variable x;",
      "x = variable;",
      "int x;",
      "x int;"
    ],
    "answer": "int x;"
  },
  {
    "id": 2,
    "question": "Which of the following is not a valid data type in C?",
    "options": [
      "int",
      "real",
      "char",
      "float"
    ],
    "answer": "real"
  },
  {
    "id": 3,
    "question": "What is the output of the following code snippet? ```c printf(\"%d\", sizeof(int)); ```",
    "options": [
      "2",
      "4",
      "8",
      "Depends on the system"
    ],
    "answer": "Depends on the system"
  },
  {
    "id": 4,
    "question": "What is the correct way to comment a single line in C?",
    "options": [
      "// This is a comment",
      "/* This is a comment */",
      "-- This is a comment",
      "# This is a comment"
    ],
    "answer": "// This is a comment"
  },
  {
    "id": 5,
    "question": "What does the `scanf` function do in C?",
    "options": [
      "Print output to the console",
      "Read input from the user",
      "Perform arithmetic operations",
      "Declare variables"
    ],
    "answer": "Read input from the user"
  },
  {
    "id": 6,
    "question": "What is the output of the following code snippet? ``` int x = 5; printf(\"%d\", x++); ```",
    "options": [
      "5",
      "6",
      "4",
      "Error"
    ],
    "answer": "5"
  },
  {
    "id": 7,
    "question": "What is the size of an array declared as `int arr[5]` in C?",
    "options": [
      "5 bytes",
      "10 bytes",
      "20 bytes",
      "Depends on the system"
    ],
    "answer": "Depends on the system"
  },
  {
    "id": 8,
    "question": "Which operator is used to access the value at a memory address in C?",
    "options": [
      "*",
      "&",
      "%",
      "/"
    ],
    "answer": "*"
  },
  {
    "id": 9,
    "question": "What does the `break` statement do in a loop in C?",
    "options": [
      "Skips the current iteration and continues with the next iteration",
      "Exits the loop and resumes execution after the loop",
      "Terminates the program",
      "None of the above"
    ],
    "answer": "Exits the loop and resumes execution after the loop"
  },
  {
    "id": 10,
    "question": "What is the correct way to declare a string in C?",
    "options": [
      "`string s = \"Hello\";`",
      "`char s = \"Hello\";`",
      "`char s[] = \"Hello\";`",
      "`string s[] = \"Hello\";`"
    ],
    "answer": "`char s[] = \"Hello\";`"
  },
  {
    "id": 11,
    "question": "What does the `strcmp` function do in C?",
    "options": [
      "Compares two strings and returns 1 if they are equal",
      "Concatenates two strings",
      "Compares two strings and returns 0 if they are equal",
      "Copies one string into another"
    ],
    "answer": "Compares two strings and returns 0 if they are equal"
  },
  {
    "id": 12,
    "question": "Which header file should be included to use input/output functions in C?",
    "options": [
      "`<input.h>`",
      "`<output.h>`",
      "`<stdio.h>`",
      "`<iostream.h>`"
    ],
    "answer": "`<stdio.h>`"
  },
  {
    "id": 13,
    "question": "What is the purpose of the `void` keyword in a function declaration in C?",
    "options": [
      "Indicates that the function returns nothing",
      "Indicates that the function takes no arguments",
      "Indicates that the function is recursive",
      "Indicates that the function is static"
    ],
    "answer": "Indicates that the function returns nothing"
  },
  {
    "id": 14,
    "question": "What is the output of the following code snippet? ```c int x = 10; printf(\"%d\", x > 5 ? 1 : 0); ```",
    "options": [
      "1",
      "0",
      "Error",
      "Depends on the system"
    ],
    "answer": "1"
  },
  {
    "id": 15,
    "question": "Which of the following is not a valid control structure in C?",
    "options": [
      "switch-case",
      "if-else",
      "repeat-until",
      "for loop"
    ],
    "answer": "repeat-until"
  },
  {
    "id": 16,
    "question": "What does the `%d` format specifier indicate in a printf statement in C?",
    "options": [
      "Double",
      "Decimal integer",
      "String",
      "Character"
    ],
    "answer": "Decimal integer"
  },
  {
    "id": 17,
    "question": "What is the correct way to declare a constant in C?",
    "options": [
      "`constant int x = 5;`",
      "`int constant x = 5;`",
      "`const int x = 5;`",
      "`int x = const 5;`"
    ],
    "answer": "`const int x = 5;`"
  },
  {
    "id": 18,
    "question": "What does the `sizeof` operator return in C?",
    "options": [
      "Value of an expression",
      "Size of a variable or data type in bytes",
      "Address of a variable",
      "None of the above"
    ],
    "answer": "Size of a variable or data type in bytes"
  },
  {
    "id": 19,
    "question": "What does the expression `(x && y)` evaluate to if x = 1 and y = 0?",
    "options": [
      "1",
      "0",
      "True",
      "False"
    ],
    "answer": "0"
  },
  {
    "id": 20,
    "question": "How do you declare a pointer variable in C?",
    "options": [
      "`pointer p;`",
      "`p pointer;`",
      "`int *p;`",
      "`*int p;`"
    ],
    "answer": "`int *p;`"
  },
  {
    "id": 21,
    "question": "What is the purpose of using `malloc` function in C?",
    "options": [
      "To free allocated memory",
      "To allocate memory dynamically",
      "To declare a new variable",
      "To print memory address"
    ],
    "answer": "To allocate memory dynamically"
  },
  {
    "id": 22,
    "question": "Which of these functions is used to compare two strings in C?",
    "options": [
      "`strcat()`",
      "`strcmp()`",
      "`strlen()`",
      "`strcpy()`"
    ],
    "answer": "`strcmp()`"
  },
  {
    "id": 23,
    "question": "What is the correct way to include a header file in a C program?",
    "options": [
      "`#include \"header.h\"`",
      "`include <header.h>`",
      "`#import \"header.h\"`",
      "`import header.h`"
    ],
    "answer": "`#include \"header.h\"`"
  },
  {
    "id": 24,
    "question": "What is the purpose of the `break` statement in C?",
    "options": [
      "Exit the loop or switch statement",
      "Skip the current iteration of a loop",
      "Continue to the next iteration of a loop",
      "Print a message to the console"
    ],
    "answer": "Exit the loop or switch statement"
  },
  {
    "id": 25,
    "question": "Which of the following is not a valid way to declare a string in C?",
    "options": [
      "`char str[] = \"Hello\";`",
      "`char *str = \"Hello\";`",
      "`string str = \"Hello\";`",
      "`char str[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};`"
    ],
    "answer": "`string str = \"Hello\";`"
  },
  {
    "id": 26,
    "question": "Which symbol is used to access the value pointed to by a pointer in C?",
    "options": [
      "&",
      "*",
      "->",
      "::"
    ],
    "answer": "*"
  },
  {
    "id": 27,
    "question": "What is the purpose of the `malloc` function in C?",
    "options": [
      "Free allocated memory",
      "Allocate memory dynamically",
      "Return the size of a variable",
      "Concatenate strings"
    ],
    "answer": "Allocate memory dynamically"
  },
  {
    "id": 28,
    "question": "Which function is used to compare two strings in C?",
    "options": [
      "`strcmp()`",
      "`strcat()`",
      "`strlen()`",
      "`strcpy()`"
    ],
    "answer": "`strcmp()`"
  },
  {
    "id": 29,
    "question": "What is the correct way to declare a constant in C?",
    "options": [
      "`constant int x = 5;`",
      "`int const x = 5;`",
      "`int x = const 5;`",
      "`define x 5;`"
    ],
    "answer": "`int const x = 5;`"
  },
  {
    "id": 30,
    "question": "Which of the following is not a valid identifier in C?",
    "options": [
      "`_variable`",
      "`123variable`",
      "`var_name`",
      "`variable123`"
    ],
    "answer": "`123variable`"
  },
  {
    "id": 31,
    "question": "What does the `void` keyword indicate in a function declaration in C?",
    "options": [
      "The function returns nothing",
      "The function takes no arguments",
      "The function is a recursive function",
      "The function is a library function"
    ],
    "answer": "The function returns nothing"
  },
  {
    "id": 32,
    "question": "Which of the following is used to access elements in an array in C?",
    "options": [
      "()",
      "[]",
      "{}",
      "<>"
    ],
    "answer": "[]"
  },
  {
    "id": 33,
    "question": "What is the purpose of the `continue` statement in C?",
    "options": [
      "Exit the loop",
      "Skip the current iteration of a loop",
      "Jump to a specific label in the program",
      "Print a message to the console"
    ],
    "answer": "Skip the current iteration of a loop"
  },
  {
    "id": 34,
    "question": "What is the correct way to define a structure in C?",
    "options": [
      "`struct Person { char name; int age; };`",
      "`struct { char name; int age; } Person;`",
      "`struct Person { char name; int age; }`",
      "`Person { char name; int age; };`"
    ],
    "answer": "`struct Person { char name; int age; }`"
  },
  {
    "id": 35,
    "question": "What is the output of the following code snippet? ```c int x = 10; int y = 3; printf(\"%d\", x / y); ```",
    "options": [
      "3",
      "2",
      "3.33",
      "0"
    ],
    "answer": "3"
  },
  {
    "id": 36,
    "question": "Which of the following is used to define a pointer in C?",
    "options": [
      "&",
      "*",
      "->",
      "::"
    ],
    "answer": "*"
  },
  {
    "id": 37,
    "question": "Which of the following is not a valid way to initialize an array in C?",
    "options": [
      "`int arr[5] = {1, 2, 3, 4, 5};`",
      "`int arr[] = {1, 2, 3, 4, 5};`",
      "`int arr[5]; arr = {1, 2, 3, 4, 5};`",
      "`int arr[5]; for (int i = 0; i < 5; i++) arr[i] = i + 1;`"
    ],
    "answer": "`int arr[5]; arr = {1, 2, 3, 4, 5};`"
  },
  {
    "id": 38,
    "question": "What is the output of the following code snippet? ```c int x = 7; printf(\"%d\", x % 2); ```",
    "options": [
      "0",
      "1",
      "2",
      "3"
    ],
    "answer": "1"
  },
  {
    "id": 39,
    "question": "Which function is used to copy one string to another in C?",
    "options": [
      "`strcat()`",
      "`strcpy()`",
      "`strlen()`",
      "`strcmp()`"
    ],
    "answer": "`strcpy()`"
  },
  {
    "id": 40,
    "question": "What does the `static` keyword do when applied to a variable in C?",
    "options": [
      "Limits the variable's scope to the current file",
      "Makes the variable immutable",
      "Allocates memory dynamically for the variable",
      "Initializes the variable with a default value"
    ],
    "answer": "Limits the variable's scope to the current file"
  },
  {
    "id": 41,
    "question": "What is the purpose of the `do-while` loop in C?",
    "options": [
      "Execute a block of code repeatedly as long as a condition is true",
      "Execute a block of code only once",
      "Execute a block of code based on a condition at the beginning of the loop",
      "Execute a block of code based on a condition at the end of the loop"
    ],
    "answer": "Execute a block of code repeatedly as long as a condition is true"
  },
  {
    "id": 42,
    "question": "Which symbol is used for preprocessor directives in C?",
    "options": [
      "#",
      "$",
      "&",
      "*"
    ],
    "answer": "#"
  },
  {
    "id": 43,
    "question": "What is the purpose of the ternary operator (`? :`) in C?",
    "options": [
      "Assign a value to a variable based on a condition",
      "Perform arithmetic operations",
      "Compare two values",
      "Concatenate strings"
    ],
    "answer": "Assign a value to a variable based on a condition"
  },
  {
    "id": 44,
    "question": "Which library should be included to use input/output functions like `printf` and `scanf` in C?",
    "options": [
      "`<stdlib.h>`",
      "`<math.h>`",
      "`<string.h>`",
      "`<stdio.h>`"
    ],
    "answer": "`<stdio.h>`"
  },
  {
    "id": 45,
    "question": "What is the correct way to free dynamically allocated memory in C?",
    "options": [
      "`free(memory);`",
      "`delete(memory);`",
      "`remove(memory);`",
      "`dealloc(memory);`"
    ],
    "answer": "`free(memory);`"
  },
  {
    "id": 46,
    "question": "What is the purpose of the `sizeof` operator in C?",
    "options": [
      "Return the size of a variable in bytes",
      "Calculate the square root of a number",
      "Find the remainder of a division operation",
      "Convert a variable to a different data type"
    ],
    "answer": "Return the size of a variable in bytes"
  },
  {
    "id": 47,
    "question": "Which of the following is not a valid way to declare and initialize an array in C?",
    "options": [
      "`int arr[5] = {1, 2, 3, 4, 5};`",
      "`int arr[] = {1, 2, 3, 4, 5};`",
      "`int arr[5] = [1, 2, 3, 4, 5];`",
      "`int arr[5] = {0};`"
    ],
    "answer": "`int arr[5] = [1, 2, 3, 4, 5];`"
  },
  {
    "id": 48,
    "question": "What is the purpose of the `static` keyword in C?",
    "options": [
      "Declare a global variable",
      "Allocate memory dynamically",
      "Limit the scope of a variable to the current file",
      "Define a constant value"
    ],
    "answer": "Limit the scope of a variable to the current file"
  },
  {
    "id": 49,
    "question": "What does the `exit()` function do in C?",
    "options": [
      "Print a message to the console",
      "Exit the program immediately",
      "Return a value from a function",
      "Restart the program execution"
    ],
    "answer": "Exit the program immediately"
  }
]
